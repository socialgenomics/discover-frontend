version: 2

defaults: &defaults
  working_directory: ~/discover

jobs:
  test:
    <<: *defaults
    docker:
      - image: circleci/node:8.5-browsers
    steps:
      - checkout
      # - run:
      #     name: update-npm
      #     command: |
      #       sudo npm install -g npm@latest
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: yarn-install
          command: |
            yarn
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: test
          command: |
            npm test

#      - run:
#          name: code-coverage
#          command: './node_modules/.bin/nyc report --reporter=text-lcov'
#      - store_artifacts:
#          path: test-results.xml
#          prefix: tests
#      - store_artifacts:
#          path: coverage
#          prefix: coverage
#      - store_test_results:
#          path: test-results.xml
      - run:
          name: Build ember app
          command: |
            mkdir artifacts
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              node_modules/ember-cli/bin/ember build --environment staging
              mv dist artifacts/staging-build
              if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$"; then
                node_modules/ember-cli/bin/ember build --environment production
                mv dist artifacts/production-build
              fi
            fi
      - persist_to_workspace:
          root: .
          paths:
            - artifacts

  build_container_sta:
    <<: *defaults
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - setup_remote_docker

      # Build the image
      - run:
          name: Build application Docker image
          command: |
              if [ -d workspace/artifacts/staging-build ]; then
                rm -fr dist
                cp -r workspace/artifacts/staging-build dist
                docker build --cache-from=app -t app-staging .
              fi
      # Push to the docker registry
      - run:
          name: Login in the docker registry
          command: |
            docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS registry.repositive.io:5000
      - run:
          name: Push application Docker image
          command: |
            if [ -d workspace/artifacts/staging-build ]; then
              docker tag app-staging "registry.repositive.io:5000/discover:$(git describe --abbrev=0).$(git rev-parse --short HEAD)-sta"
              docker push "registry.repositive.io:5000/discover:$(git describe --abbrev=0).$(git rev-parse --short HEAD)-sta"
              echo true >> deploy
            else
              echo false >> deploy
            fi
      - persist_to_workspace:
          root: .
          paths:
            - deploy

  build_container_prod:
    <<: *defaults
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - setup_remote_docker

      # Build the image
      - run:
          name: Build application Docker image
          command: |
              if [ -d workspace/artifacts/production-build ]; then
                rm -fr dist
                cp -r workspace/artifacts/production-build dist
                docker build --cache-from=app -t app-production .
              fi
      # Push to the docker registry
      - run:
          name: Login in the docker registry
          command: |
            docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS registry.repositive.io:5000
      - run:
          name: Push application Docker image
          command: |
            if [ -d workspace/artifacts/production-build ]; then
              docker tag app-production "registry.repositive.io:5000/discover:$(git describe --abbrev=0).$(git rev-parse --short HEAD)-pro"
              docker push "registry.repositive.io:5000/discover:$(git describe --abbrev=0).$(git rev-parse --short HEAD)-pro"
              echo true >> deploy
            else
              echo false >> deploy
            fi
      - persist_to_workspace:
          root: .
          paths:
            - deploy


  deploy_staging:
    <<: *defaults
    docker:
      - image: istareldritch/curl-envsubst
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Install kubectl
          command: |
            if [ $(cat workspace/deploy) = true ]; then
              curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
              chmod +x ./kubectl
            fi
      - run:
          name: Create deployment files
          command: |
            if [ $(cat workspace/deploy) = true ]; then
              curl -O -u $DEPLOYMENT_USER:$DEPLOYMENT_PASS https://deployment-server-staging.repositive.io/kubeconfig-staging
              TAG=$(git describe --abbrev=0).$(git rev-parse --short HEAD)-sta envsubst '${TAG}' < .circleci/k8s.staging.yml > deploy-staging.yml
            fi
      - deploy:
          name: Publish
          command: |
            if [ $(cat workspace/deploy) = true ]; then
              KUBECONFIG=kubeconfig-staging ./kubectl apply -f deploy-staging.yml
              curl "https://slack.com/api/chat.postMessage?token=$SLACK_TOKEN&channel=dev&as_user=Liz&text=:rocket:%20*New%20Staging%20Deployment:*%20Discover%20Frontend%20$TAG$(git describe --abbrev=0).$(git rev-parse --short HEAD)"
            fi

  deploy_production:
    <<: *defaults
    docker:
      - image: istareldritch/curl-envsubst
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Install kubectl
          command: |
            if [ $(cat workspace/deploy) = true ]; then
              curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
              chmod +x ./kubectl
            fi
      - run:
          name: Create deployment files
          command: |
            if [ $(cat workspace/deploy) = true ]; then
              curl -O -u $DEPLOYMENT_USER:$DEPLOYMENT_PASS https://deployment-server-production.repositive.io/kubeconfig-production
              TAG=$(git describe --abbrev=0).$(git rev-parse --short HEAD)-pro envsubst '${TAG}' < .circleci/k8s.production.yml > deploy-production.yml
            fi
      - deploy:
          name: Publish
          command: |
            if [ $(cat workspace/deploy) = true ]; then
              KUBECONFIG=kubeconfig-production ./kubectl apply -f deploy-production.yml
              curl "https://slack.com/api/chat.postMessage?token=$SLACK_TOKEN&channel=dev&as_user=Liz&text=:rocket:%20*New%20Production%20Deployment:*%20Discover%20Frontend%20$TAG$(git describe --abbrev=0).$(git rev-parse --short HEAD)"
            fi

workflows:
  version: 2
  test_and_release:
    jobs:
      - test
      - build_container_prod:
          requires:
            - test
          filters:
            branches:
              only: master
      - build_container_sta:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy_production:
          requires:
            - build_container_prod
          filters:
            branches:
              only: master
      - deploy_staging:
          requires:
            - build_container_sta
          filters:
            branches:
              only: master
